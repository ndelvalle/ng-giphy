{"version":3,"sources":["giphy.module.js","directives/find.directive.js","directives/findbyid.directive.js","directives/findrand.directive.js","directives/giphy.template.cache.js","services/apikey.provider.js","services/giphy.service.js"],"names":["angular","module","findGiphy","scope","q","rating","controller","findGiphyController","controllerAs","bindToController","templateUrl","giphy","vm","this","findUrl","then","res","giphysrc","directive","$inject","findGiphyById","id","findGiphyByIdController","findUrlById","url","findRandGiphy","findRandGiphyController","findRandomUrl","templateCache","$templateCache","put","run","ngGiphyConfig","giphyConfigProvider","setKey","giphyConfig","value","key","$get","provider","config","giphyService","$http","find","tags","limit","offset","http","get","paramsMapper","response","responseMapper","findById","replace","findRandom","random","image_url","findTrending","trending","undefined","findTrendingUrl","returnUrl","isArray","constructor","Array","map","item","images","original","params","join","baseUrl","data","api_key","factory"],"mappings":"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","file":"ng-giphy.min.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('ng-giphy', []);\n\n})();\n","(function () {\n  'use strict';\n\n  angular.module('ng-giphy')\n    .directive('giphyFind', findGiphy);\n\n  /**\n   * Directive: find gif by tag\n   */\n  function findGiphy() {\n    return {\n      scope: {\n        q: '=gTag',\n        rating: '='\n      },\n      controller: findGiphyController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'imgTemplate.html'\n    };\n  }\n\n  findGiphyController.$inject = ['giphy'];\n  /* @ngInject */\n  function findGiphyController(giphy) {\n    /* jshint validthis: true */\n    var vm = this;\n\n    giphy.findUrl(vm.q, 1).then(function (res) {\n      vm.giphysrc = res[0];\n    });\n  }\n\n})();\n","(function () {\n  'use strict';\n\n  angular.module('ng-giphy')\n    .directive('giphyId', findGiphyById);\n\n  /**\n   * Directive: find gif by id\n   */\n  function findGiphyById() {\n    return {\n      scope: {\n        id: '=gId',\n        rating: '='\n      },\n      controller: findGiphyByIdController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'imgTemplate.html'\n    };\n  }\n\n  findGiphyByIdController.$inject = ['giphy'];\n  /* @ngInject */\n  function findGiphyByIdController(giphy) {\n    /* jshint validthis: true */\n    var vm = this;\n\n    giphy.findUrlById(vm.id).then(function (url) {\n      vm.giphysrc = url;\n    });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('ng-giphy')\n    .directive('giphyRand', findRandGiphy);\n\n  /**\n   * Directive: find random gif by tag\n   */\n  function findRandGiphy() {\n    return {\n      scope: {\n        q: '=gTag',\n        rating: '='\n      },\n      controller: findRandGiphyController,\n      controllerAs: 'vm',\n      bindToController: true,\n      templateUrl: 'imgTemplate.html'\n    };\n  }\n\n  findRandGiphyController.$inject = ['giphy'];\n  /* @ngInject */\n  function findRandGiphyController(giphy) {\n    /* jshint validthis: true */\n    var vm = this;\n\n    giphy.findRandomUrl(vm.q).then(function (res) {\n      vm.giphysrc = res;\n    });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('ng-giphy')\n\n    .run(templateCache);templateCache.$inject = ['$templateCache'];\n  /* @ngInject */\n  function templateCache($templateCache) {\n    $templateCache.put('imgTemplate.html', '<img ng-src=\"{{ vm.giphysrc }}\">');\n  }\n\n})();\n","(function () {\n  'use strict';\n\n  angular.module('ng-giphy')\n\n    .provider('giphyConfig', giphyConfig)\n    .config(ngGiphyConfig);\n\n  // configure the provider to use the beta key\n  ngGiphyConfig.$inject = ['giphyConfigProvider'];\n  /* @ngInject */\n  function ngGiphyConfig(giphyConfigProvider) {\n    giphyConfigProvider.setKey('dc6zaTOxFJmzC');\n  }\n\n  // giphy API key provider\n  function giphyConfig() {\n    /* jshint validthis: true */\n    this.setKey = function(value) {\n      this.key = value;\n    };\n\n    this.$get = function() {\n      return this;\n    };\n  }\n\n})();\n","(function () {\n  'use strict';\n\n  angular.module('ng-giphy')\n    .factory('giphy', giphyService);\n\n  // services to interact with Giphy API endpoints\n  giphyService.$inject = ['$http', 'giphyConfig'];\n  /* @ngInject */\n  function giphyService($http, giphyConfig) {\n\n    var baseUrl = 'http://api.giphy.com/v1/gifs';\n\n    var url = {\n      random   : baseUrl + '/random',\n      find     : baseUrl + '/search',\n      findById : baseUrl + '/%s',\n      trending : baseUrl + '/trending',\n    };\n\n    var http = {\n      get: function httpGet(url, data) {\n        var params = data || {};\n        params.api_key = giphyConfig.key;\n        return $http.get(url, { params: params }).then(function (res) {\n          return res.data.data;\n        });\n      }\n    };\n\n    // expose the service API\n    return {\n      find            : find,\n      findUrl         : findUrl,\n      findById        : findById,\n      findUrlById     : findUrlById,\n      findRandom      : findRandom,\n      findRandomUrl   : findRandomUrl,\n      findTrending    : findTrending,\n      findTrendingUrl : findTrendingUrl\n    };\n\n\n    /**\n     * Gets gifs searching by tags\n     *\n     * @param {String || Array<String>} tags\n     * @param {Number} limit (optional) maximum 100. Default 25\n     * @param {Number} offset (optional) defaults to 0\n     * @return {Collection} gifs\n     */\n    function find(tags, limit, offset){\n      return http.get(url.find, paramsMapper(tags, limit, offset))\n      .then(function(response) {\n        return responseMapper(response, false, limit);\n      });\n    }\n\n\n    /**\n     * Gets gifs url searching by tags\n     *\n     * @param {String || Array<String>} tags\n     * @param {Number} limit (optional) maximum 100. Default 25\n     * @param {Number} offset (optional) defaults to 0\n     * @return {Collection} gifs\n     */\n    function findUrl(tags, limit, offset){\n      return http.get(url.find, paramsMapper(tags, limit, offset))\n      .then(function(response) {\n        return responseMapper(response, true, limit);\n      });\n    }\n\n\n   /**\n    * Gets a gif searching by id\n    *\n    * @param {String} gif id\n    * @return {String} gif\n    */\n    function findById(id){\n      return http.get(url.findById.replace('%s', id));\n    }\n\n\n    /**\n     * Gets a gif url searching by id\n     *\n     * @param {String} gif id\n     * @return {String} gif url\n     */\n     function findUrlById(id){\n       return http.get(url.findById.replace('%s', id))\n       .then(function(response) {\n         return responseMapper(response, true);\n       });\n     }\n\n\n    /**\n     * Gets random gif searching by tag\n     *\n     * @param {String || Array<String>} tags\n     * @return {String} gif\n     */\n    function findRandom(tags){\n      return http.get(url.random, paramsMapper(tags));\n    }\n\n\n    /**\n     * Gets random gif searching by tag\n     *\n     * @param {String || Array<String>} tags\n     * @return {String} gif url\n     */\n    function findRandomUrl(tags){\n      return http.get(url.random, paramsMapper(tags))\n      .then(function(response) {\n        return response.image_url;\n      });\n    }\n\n\n    /**\n     * Fetch GIFs currently trending online. Hand curated by the Giphy editorial team.\n     * The data returned mirrors the GIFs showcased on the Giphy homepage.\n     *\n     * @param {Number} limit (optional) maximum 100. Default 25\n     * @param {Number} offset (optional) defaults to 0\n     * @return {Collection} gifs\n     */\n    function findTrending(limit, offset) {\n      return http.get(url.trending, paramsMapper(undefined, limit, offset))\n      .then(function(response) {\n        return responseMapper(response, false);\n      });\n    }\n\n\n    /**\n     * Fetch GIFs currently trending online. Hand curated by the Giphy editorial team.\n     * The data returned mirrors the GIFs showcased on the Giphy homepage.\n     *\n     * @param {Number} limit (optional) maximum 100. Default 25\n     * @param {Number} offset (optional) defaults to 0\n     * @return {Collection} gifs url\n     */\n    function findTrendingUrl(limit, offset) {\n      return http.get(url.trending, paramsMapper(undefined, limit, offset))\n      .then(function(response) {\n        return responseMapper(response, true);\n      });\n    }\n\n    /**\n     * Map the response\n     *\n     * @param {Collection} response\n     * @param {Boolean} returnUrl, weather should return a gif or a gif url\n     * @return {Collection} mapped response\n     */\n    function responseMapper(response, returnUrl) {\n      if (!returnUrl) return response;\n      var isArray = response.constructor === Array;\n      if (!isArray) return response.images.original.url;\n      return response.map(function(item) {\n        return item.images.original.url;\n      });\n    }\n\n\n    /**\n     * Map http get params\n     *\n     * @param {String || Array<String>} tags\n     * @param {Number} limit\n     * @param {Number} offset\n     * @returns {Object} params ready to use in http get request\n     */\n    function paramsMapper(tags, limit, offset) {\n      var params = {};\n      if (tags) params.q = tags.constructor === Array ? tags.join('+') : tags;\n      if (limit) params.limit = limit;\n      if (offset) params.offset = offset;\n      return params;\n    }\n  }\n\n})();\n"],"sourceRoot":"/source/"}